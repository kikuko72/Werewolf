@startuml
title クラス構成概観

class "Controller" as Controller {
    +listen(request : Operation) : Either<Exception, State>
}

interface "Operation" as Operation {
    ~getGameID()    : GameID
    ~getPlayerID()  : PlayerID
}

class "Player" as Player {
    playerID : PlayerID
    isAlive : boolean
    role : Role
}

abstract class "State" as State {
    players : Map<PlayerID, Player>
    channels : Channels
    ~applyPath(patch StatePatch) : State
}

interface "StateStore" as StateStore {
    +push(gameID: GameID, state : State) : Optional<Fail<State>>
    +fetch(gameID : GameID) : Either<Exception, State>
    +optimisticUpdate(gameID : GameID, oldState : State, newState : State) : Optional<Fail<State>>
}

interface "GameLogic" as GameLogic {
    +call(playerID : PlayerID, operation Operation, targets : List<ID>, state : State) : Either<Exception, State>
}

Operation - Controller
Controller - StateStore
Controller -down- GameLogic
StateStore -down- State
State "1" o- "1...*" Player

@enduml